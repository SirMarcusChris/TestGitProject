{"name": "test_create_user", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.SchemaError: ' string' is not valid under any of the given schemas\n\nFailed validating 'anyOf' in metaschema['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][3]['properties']['type']:\n    {'anyOf': [{'$ref': '#/$defs/simpleTypes'},\n               {'type': 'array',\n                'items': {'$ref': '#/$defs/simpleTypes'},\n                'minItems': 1,\n                'uniqueItems': True}]}\n\nOn schema['properties']['id']['type']:\n    ' string'", "trace": "def test_create_user():\n        body = {\n            \"name\": \"morpheus\",\n            \"job\": \"leader\"\n        }\n        response = httpx.post(BASE_URL + CREATE_USER, json=body)\n        assert response.status_code == 201\n    \n>       validate(response.json(), CREATED_USER_SCHEME)\n\ntests/test_work_with_user_data.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/jsonschema/validators.py:1328: in validate\n    cls.check_schema(schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'jsonschema.validators.Draft202012Validator'>\nschema = {'properties': {'id': {'type': ' string'}, 'job': {'type': 'string'}, 'name': {'type': 'string'}}, 'required': ['name', 'job', 'id'], 'type': 'object'}\nformat_checker = <FormatChecker checkers=['date', 'email', 'idn-email', 'idn-hostname', 'ipv4', 'ipv6', 'regex', 'uuid']>\n\n    @classmethod\n    def check_schema(cls, schema, format_checker=_UNSET):\n        Validator = validator_for(cls.META_SCHEMA, default=cls)\n        if format_checker is _UNSET:\n            format_checker = Validator.FORMAT_CHECKER\n        validator = Validator(\n            schema=cls.META_SCHEMA,\n            format_checker=format_checker,\n        )\n        for error in validator.iter_errors(schema):\n>           raise exceptions.SchemaError.create_from(error)\nE           jsonschema.exceptions.SchemaError: ' string' is not valid under any of the given schemas\nE           \nE           Failed validating 'anyOf' in metaschema['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][3]['properties']['type']:\nE               {'anyOf': [{'$ref': '#/$defs/simpleTypes'},\nE                          {'type': 'array',\nE                           'items': {'$ref': '#/$defs/simpleTypes'},\nE                           'minItems': 1,\nE                           'uniqueItems': True}]}\nE           \nE           On schema['properties']['id']['type']:\nE               ' string'\n\n.venv/lib/python3.12/site-packages/jsonschema/validators.py:317: SchemaError"}, "start": 1729323435517, "stop": 1729323436334, "uuid": "3ca53f39-6957-49c5-b811-640f9481443c", "historyId": "dfb3373b0441451fbf3ef32cb0efdb69", "testCaseId": "dfb3373b0441451fbf3ef32cb0efdb69", "fullName": "tests.test_work_with_user_data#test_create_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_work_with_user_data"}, {"name": "host", "value": "MacBookPro.dlink"}, {"name": "thread", "value": "19801-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_work_with_user_data"}]}
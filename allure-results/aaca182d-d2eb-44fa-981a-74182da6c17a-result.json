{"name": "test_create_user", "status": "broken", "statusDetails": {"message": "httpx.ConnectError: [Errno 8] nodename nor servname provided, or not known", "trace": "@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:236: in handle_request\n    resp = self._pool.handle_request(req)\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection_pool.py:216: in handle_request\n    raise exc from None\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection_pool.py:196: in handle_request\n    response = connection.handle_request(\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection.py:99: in handle_request\n    raise exc\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection.py:76: in handle_request\n    stream = self._connect(request)\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection.py:122: in _connect\n    stream = self._network_backend.connect_tcp(**kwargs)\n.venv/lib/python3.12/site-packages/httpcore/_backends/sync.py:205: in connect_tcp\n    with map_exceptions(exc_map):\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'TimeoutError'>: <class 'httpcore.ConnectTimeout'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ConnectError: [Errno 8] nodename nor servname provided, or not known\n\n.venv/lib/python3.12/site-packages/httpcore/_exceptions.py:14: ConnectError\n\nThe above exception was the direct cause of the following exception:\n\n    def test_create_user():\n        body = {\n            \"name\": \"morpheus\",\n            \"job\": \"leader\"\n        }\n>       response = httpx.post(BASE_URL + CREATE_USER, json=body)\n\ntests/test_work_with_user_data.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/httpx/_api.py:331: in post\n    return request(\n.venv/lib/python3.12/site-packages/httpx/_api.py:118: in request\n    return client.request(\n.venv/lib/python3.12/site-packages/httpx/_client.py:837: in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n.venv/lib/python3.12/site-packages/httpx/_client.py:926: in send\n    response = self._send_handling_auth(\n.venv/lib/python3.12/site-packages/httpx/_client.py:954: in _send_handling_auth\n    response = self._send_handling_redirects(\n.venv/lib/python3.12/site-packages/httpx/_client.py:991: in _send_handling_redirects\n    response = self._send_single_request(request)\n.venv/lib/python3.12/site-packages/httpx/_client.py:1027: in _send_single_request\n    response = transport.handle_request(request)\n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:235: in handle_request\n    with map_httpcore_exceptions():\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ConnectError: [Errno 8] nodename nor servname provided, or not known\n\n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:89: ConnectError"}, "start": 1729334305756, "stop": 1729334305778, "uuid": "b55f91db-e25e-48a8-8342-a702f842f33e", "historyId": "dfb3373b0441451fbf3ef32cb0efdb69", "testCaseId": "dfb3373b0441451fbf3ef32cb0efdb69", "fullName": "tests.test_work_with_user_data#test_create_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_work_with_user_data"}, {"name": "host", "value": "denis.local"}, {"name": "thread", "value": "21067-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_work_with_user_data"}]}